#two-columns
  .left
    ul.login-nav
      li.active
        a(href: '/developer') Developer Center
      li.part
        a(href: '#requests') Making Requests
      li.section
        a(href: '#authentication') Authentication
      li.section
        a(href: '#success') Success Responses
      li.section
        a(href: '#error') Error Responses
      li.part
        a(href: '#data') Data Formats
      li.section
        a(href: '#data-date') Date
      li.section
        a(href: '#data-time') Time
      li.section
        a(href: '#data-timestamp') Timestamp
      li.part
        a(href: '#user') User
      li.section
        a(href: '#user-profile') Profile
      li.section
        a(href: '#user-change') Change Profile
      li.section
        a(href: '#user-email') Manage Emails
      li.section
        a(href: '#user-contacts') Contacts List
      li.section
        a(href: '#user-who') Who am I?
      li.section
        a(href: '#user-lookup') Lookup
      li.section
        a(href: '#user-projects') Projects List
      li.part
        a(href: '#project') Project
      li.section
        a(href: '#project-new') New
      li.section
        a(href: '#project-properties') Properties
      li.section
        a(href: '#project-change') Change Properties
      li.section
        a(href: '#project-position') Set Position
      li.section
        a(href: '#project-delete') Delete / Leave
      li.section
        a(href: '#project-tasks') Tasks List
      li.section
        a(href: '#project-invite') Add Participants
      li.section
        a(href: '#project-uninvite') Remove participant
      li.section
        a(href: '#project-join') Join
      li.section
        a(href: '#project-last') Stamp Last
      li.section
        a(href: '#project-tips') Tips
      li.section
        a(href: '#project-suggestions') Suggestions
      li.section
        a(href: '#project-suggestions-exclude') Exclude Suggestion
      li.part
        a(href: '#task') Task
      li.section
        a(href: '#task-new') New
      li.section
        a(href: '#task-new-suggestion') New from Suggestion
      li.section
        a(href: '#task-properties') Properties
      li.section
        a(href: '#task-change') Change Properties
      li.section
        a(href: '#task-position') Set Position
      li.section
        a(href: '#task-last') Stamp Last
      li.section
        a(href: '#task-delete') Delete task
      li.part
        a(href: '#details') Task Details
      li.section
        a(href: '#details-view') View
      li.section
        a(href: '#details-update') Add Thread Comment
      li.part
        a(href: '#storage') Client Storage
      li.section
        a(href: '#storage-all') Get All
      li.section
        a(href: '#storage-key') Get Key
      li.section
        a(href: '#storage-update') Set Value
      li.section
        a(href: '#storage-delete') Delete Key
      li.part
        a(href: '#batch') Batch Requests
      li.section
        a(href: '#batch-get') GET Batch
      li.part
        a(href: '#stream') Streaming Updates
      li.section
        a(href: '#stream-types') Update Types
      li.section
        a(href: '#stream-subscribe') Project Subscribe
      li.section
        a(href: '#stream-unsubscribe') Project Unsubscribe

    a#bottom.blue(href: '/') &larr; Back to #{product.name}

  .right

    #text-box

      .part Service API v1.0

        .text The following documentation describes the #{product.name} v1.0 API. This is the same API powering the #{product.name} web and mobile clients and is available to third-party developers. The API is currently available for experimentation and we will post the full terms of service shortly.

      a(name: 'test')
      .part API Test Utility

        .text An 
          a(href: '/developer/console') API test utility
          |  is available to assist in learning and experimenting with the API. The utility includes easy to read source code which can be
          | copied and used for writing JavaScript-based clients. It also includes basic 
          a(href: '#stream') streaming updates
          |  support.

      a(name: 'requests')
      .part Making requests

        a(name: 'authentication')
        .section Authentication

          .text
            | Every API request must include an OAuth 2.0 access token via the 
            a(href: 'http://tools.ietf.org/html/draft-ietf-oauth-v2-http-mac') MAC authentication scheme
            |. For example:

          pre
            | GET /projects HTTP/1.1
            | Host: #{host.authority('api')}
            | Authorization: MAC id="c577a77d8ef1",
            |                    nonce="32123:NqBXXpvO",
            |                    mac="0pWn5izWGqLZEggfeKVrVoegQ3o="

        a(name: 'success')
        .section Success Responses

          .text All API responses are JSON encoded.

          .sub-section GET

            .text Status code: 200. GET responses are JSON objects. For example:

            pre
              | HTTP/1.1 200 Ok
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | 
              | [ { "id": "f4d9975080", "title": "Test project"},
              |   { "id": "55cf687663", "title": "Anniversary Party"},
              |   { "id": "22583c93fc", "title": "Cake"} ]

          .sub-section POST

            .text Status code 200. Successful POST response:
      
            pre
              | HTTP/1.1 200 Ok
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | 
              | { "status": "ok" }

          .sub-section PUT

            .text Status code 201. Successful PUT responses include the ID of the newly created resource, as well as an absolute resource URI in the Location header. For example, when creating a new project:

            pre
              | PUT /project HTTP/1.1
              | Host: #{host.authority('api')}

            .text The server responds with:

            pre
              | HTTP/1.1 201 Created
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | Location: #{host.uri('api')}/project/eff4d99750
              | 
              | { "status": "ok",
              |   "id": "f4d9975080" }

          .sub-section DELETE

            .text Status code 200. Successful DELETE response:

            pre
              | HTTP/1.1 200 Ok
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | 
              | { "status": "ok" }

        a(name: 'error')
        .section Error Responses

          .sub-section 400 Bad Request

            .text A 400 response means the request was incorrect including bad query parameters, bad body keys, etc.

            pre
              | HTTP/1.1 400 Ok
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | 
              | { "error": "Bad Request",
              |   "message": "Invalid email address",
              |   "code": 400 }

          .sub-section 401 Unauthorized

            .text The request was missing MAC authentication credentials or the authorization header was incorrect.

            pre
              | HTTP/1.1 401 Ok
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | 
              | { "error": "Unauthorized",
              |   "message": "Invalid authentication",
              |   "code": 401 }

          .sub-section 403 Forbidden

            .text An attempt to access projects or tasks belonging to other users.

            pre
              | HTTP/1.1 403 Ok
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | 
              | { "error": "Forbidden",
              |   "code": 403 }

          .sub-section 404 Not Found

            .text The API method or requested resource was not found.

            pre
              | HTTP/1.1 404 Ok
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | 
              | { "error": "Not Found",
              |   "message": "No such path or method",
              |   "code": 404 }

      a(name: 'data')
      .part Data Formats

        a(name: 'data-date')
        .section Date

          .text Date values are represented using a string with the yyyy-mm-dd format:
        
          pre
            | { "date": "2011-04-13" }

        a(name: 'data-time')
        .section Time

          .text Time values are represented using a string with the HH:mm:ss format (hour is a number between 0 and 23 inclusive):
        
          pre
            | { "time": "21:23:54" }

        a(name: 'data-timestamp')
        .section Timestamp

          .text Timestamp values are number of milliseconds since January 1st, 1970, 00:00:00 UTC:
        
          pre
            | { "created": 1299912723861 }

      a(name: 'user')
      .part User

        a(name: 'user-profile')
        .section Profile

          .sub-section GET /profile

            pre
              | { "id": "fa0bda9b1b",
              |   "created": 1299912723861,
              |   "modified": 1299912723861,
              |   "name": "John Doe",
              |   "username": "john.doe",
              |   "emails": [ { "address":"john@example.net",
              |                 "isVerified": true },
              |               { "address":"doe@example.com",
              |                 "isVerified":false } ],
              |   "facebook": "1234567890",
              |   "twitter": "1234567890",
              |   "yahoo": "ABCDEFGHIJKLMNOPQRSTUVWXYZ" }

            .text Notes:
              ul
                li First email is primary.
                li The profile will include at least one external identifier (email, facebook, twitter, or yahoo), but does not have to include all.
                li Username and name are not always available.

        a(name: 'user-change')
        .section Change Profile

          .sub-section POST /profile

            pre
              | POST /profile HTTP/1.1
              | Host: #{host.authority('api')}
              | 
              | { "name": "John Doe",
              |   "username": "john.doe" }

            .text Notes:
              ul
                li Can only set name and username.

        a(name: 'user-email')
        .section Manage Emails

          .sub-section POST /profile/email

            pre
              | POST /profile/email HTTP/1.1
              | Host: #{host.authority('api')}
              | 
              | { "address": "john.doe1@example.com",
              |   "action": "add" }

            .text Notes:
              ul
                li Action can be "add", "remove", "primary", and "verify".
                li Only verified addresses can be set to primary.
                li Primary email address cannot be removed.
                li Verify request will generate an email with a verification link.

        a(name: 'user-contacts')
        .section Contacts List

          .sub-section GET /contacts[?exclude={projectId}]

            pre
              | [ { "id": "c2727e7b75",
              |     "display": "Jane Doe",
              |     "type": "user",
              |     "last": 1307481918655 },
              |   { "id": "steve@example.com",
              |      "display": "steve@example.com",
              |      "type": "email",
              |      "last": 1306983220306 } ]

            .text Notes:
              ul
                li Contacts are not an address book, but the most frequently invited participants (automatically added after invitation).
                li If no name or username is available, display name defaults to primary email.
                li Contact type is either a registered user ("user") or email address ("email").
                li Last is the timestamp of the last time the contact was invited to a project.
                li The "exclude" parameter can be used to remove from the list existing project participants.

        a(name: 'user-who')
        .section Who am I?

          .sub-section GET /who

            pre
              | { "user": "fa0bda9b1b" }

        a(name: 'user-lookup')
        .section Lookup

          .sub-section GET /user/lookup/{type}/{account}

            pre
              | { "user": "fa0bda9b1b" }

            .text Notes:
              ul
                li Type can be "username", "email", "facebook", "twitter", or "yahoo".
                li Use HTTP status code 404 as indicator account is valid but not found.

        a(name: 'user-projects')
        .section Projects List

          .sub-section GET /projects

            pre
              | [ { "id": "eff4d9975080",
              |     "title": "Test project"},
              |   { "id": "55cf687663",
              |     "title": "Anniversary Party",
              |     "last": 1299912723861 },
              |   { "id": "d8hd838dh8",
              |     "title": "Soccer game",
              |     "isPending": true } ]

            .text Notes:
              ul
                li Projects are sorted from old to new, unless a different sort order has been set (see 
                  a(href: '#project-position') Project Position
                  |).
                li Last is present if set.
                li "isPending" flag is set to true if the user was invited but yet to accept the invitation.

      a(name: 'project')
      .part Project

        a(name: 'project-new')
        .section New

          .sub-section PUT /project

            pre
              | PUT /project HTTP/1.1
              | Host: #{host.authority('api')}
              | 
              | { "title": "New Project" }

            .text Response:

            pre
              | HTTP/1.1 201 Created
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | Location: #{host.uri('api')}/project/eff4d99750
              | 
              | { "status": "ok",
              |   "id": "eff4d99750" }

            .text Notes:
              ul
                li Available fields: "title", "date", "time", and "place".
                li Title is required.

        a(name: 'project-properties')
        .section Properties

          .sub-section GET /project/{projectId}

            pre
              | { "id": "55cf687663", 
              |   "created": 1299912723861,
              |   "modified": 1299912723865,
              |   "title": "Anniversary Party",
              |   "place": "Los Gatos, CA",
              |   "date": "2011-04-13",
              |   "time": "18:30:00",
              |   "participants": [ { "id": "fa0bda9b1b",
              |                       "display": "John Doe" },
              |                     { "id": "c2727e7b75",
              |                       "display": "Jane Doe",
              |                       "isPending": true },
              |                     { "id": "pid:4deff4e9eb",
              |                       "display": "steve@example.com",
              |                       "isPid": true,
              |                       "isPending": true },
              |                     { "id": "pid:dh38hd8hs8",
              |                       "display": "Main Street Florist",
              |                       "isPid": true } ] }

            .text Notes:
              ul
                li First participant is the project owner.
                li "isPid" means the participant is not a registered user.
                li "isPending" means the participant was invited but has yet to accept invitation.
                li When "isPid" and "isPending" are both true, it means the participant was invited, not a registered user, and has yet to join the service (see 
                  a(href: '#project-join') Project Join
                  |).
                li When "isPid" is true but "isPending" is false (not present), the participant is a dummy participant (a placeholder for someone or something that can be assigned tasks without taking active part in the project).

        a(name: 'project-change')
        .section Change Properties

          .sub-section POST /project/{projectId}

            pre
              | POST /project/55cf687663 HTTP/1.1
              | Host: #{host.authority('api')}
              | 
              | { "place": "San Francisco, CA" }

            .text Notes:
              ul
                li Available fields: "title", "date", "time", and "place".

        a(name: 'project-position')
        .section Set Position

          .sub-section POST /project/{projectId}?position={arrayPosition}

            pre
              | POST /project/55cf687663?position=0 HTTP/1.1
              | Host: #{host.authority('api')}

            .text Notes:
              ul
                li First position is 0.
                li Cannot combine changing project properties and position in one request.

        a(name: 'project-delete')
        .section Delete / Leave

          .sub-section DELETE /project/{projectId}

          .text Notes:
              ul
                li If owner, permanently deletes project, all properties, and all tasks.
                li If not owner, leaves project (project unchanged).
                li When a participant with task assignments leaves a project, a dummy participant is automatically created to assume the assignments.

        a(name: 'project-tasks')
        .section Tasks List

          .sub-section GET /project/{projectId}/tasks

            pre
              | [ { "id": "2e4ed30d96",
              |     "title": "Make Small Cake",
              |     "status": "open",
              |     "participantsCount": 1,
              |     "detailsModified": 1299912723861,
              |     "detailsModifiedBy": { "id": "c2727e7b75",
              |                            "display": "Jane Doe" },
              |     "last": 1299912723865 },
              |   { "id": "c577a77d8e",
              |     "title": "Send invitations",
              |     "status": "open",
              |     "participantsCount": 2,
              |     "isMe": true },
              |   { "id": "eff4d99750",
              |     "title": "Buy Drinks",
              |     "status": "open",
              |     "participantsCount": 0 } ]

            .text Notes:
              ul
                li Tasks are sorted from old to new unless a different sort order has been set (see 
                  a(href: '#task-position') Task Position
                  |).
                li Tasks with details have "detailsModified" and "detailsModifiedBy" keys with the last update timestamp and participant information.
                li Tasks with details may have a "last" timestamp for last time the user opened the task details (see 
                  a(href: '#task-last') Task Stamp Last
                  |).
                li Status can be "open", "pending", or "close".
                li "isMe" is set to true when the task is assigned to current user.

        a(name: 'project-invite')
        .section Add Participants

          .sub-section POST /project/{projectId}/participants[?message={message}]

            pre
              | POST /project/55cf687663/participants?message=Hi HTTP/1.1
              | Host: #{host.authority('api')}
              | 
              | { "participants": ["steve@example.com", "c2727e7b75"],
              |   "names": ["Clown"] }

            .text Response:

            pre
              | HTTP/1.1 200 Ok
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | 
              | { "status": "ok",
              |   "participants": [ { "id": "fa0bda9b1b",
              |                       "display": "John Doe" },
              |                     { "id": "c2727e7b75",
              |                       "display": "Jane Doe",
              |                       "isPending": true },
              |                     { "id": "pid:4deff4e9eb",
              |                       "display": "steve@example.com",
              |                       "isPid": true,
              |                       "isPending": true },
              |                     { "id": "pid:dh38hd8hs8",
              |                       "display": "Clown",
              |                       "isPid": true } ] }

            .text Notes:
              ul
                li Participants can be email or user Id.
                li Names can be any string, representing a dummy participant.
                li Generates an invitation email to each new participant, including the optional message.
                li Email without an existing account will send an invitation to create a new account (or use an existing account under a different email address).
                li Also adds participants to current user contacts (see 
                  a(href: '#user-contacts') User Contacts List
                  |).
                li Response includes updated participants list.

        a(name: 'project-uninvite')
        .section Remove participant

          .sub-section DELETE /project/{projectId}/participant/{userId}

            .text Notes:
              ul
                li Can only be called by project owner.
                li Cannot be used to remove owner from project (see 
                  a(href: '#project-delete') Project Delete / Leave
                  |).
                li When a participant with task assignments is removed from a project, a dummy participant is automatically created to assume the assignments.
                li Response includes updated participants list.

        a(name: 'project-uninvites')
        .section Remove participants

          .sub-section DELETE /project/{projectId}/participants

            pre
              | DELETE /project/55cf687663/participants HTTP/1.1
              | Host: #{host.authority('api')}
              | 
              | { "participants": ["pid:4deff4e9eb", "c2727e7b75", "pid:dh38hd8hs8"] }

            .text Response:

            pre
              | HTTP/1.1 200 Ok
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | 
              | { "status": "ok",
              |   "participants": [ { "id": "fa0bda9b1b",
              |                       "display": "John Doe" } ] }

            .text Notes:
              ul
                li Can only be called by project owner.
                li Cannot be used to remove owner from project (see 
                  a(href: '#project-delete') Project Delete / Leave
                  |).
                li When a participant with task assignments is removed from a project, a dummy participant is automatically created to assume the assignments.
                li Response includes updated participants list.

        a(name: 'project-join')
        .section Join

          .sub-section POST /project/{projectId}/join

            .text Notes:
              ul
                li Must be called before user can make any changed to project (can read-only until invitation is accepted).

        a(name: 'project-last')
        .section Stamp Last

          .sub-section POST /project/{projectId}/last

            .text Notes:
              ul
                li Should be called when the user is caught up with reviewing the task list (not including task details) and project properties.
                li Sets timestamp to now (using the server's clock).
                li Does not update tasks last timestamp (see 
                  a(href: '#task-last') Task Stamp Last
                  |).

        a(name: 'project-tips')
        .section Tips

          .text Tips are ways to get more out of the tool by using functionality that the user might not be aware of. For example, a tip can suggest using a more descriptive title or setting a date and place.

          .sub-section GET /project/{projectId}/tips

            pre
              | [ { "id": "6b22583c93",
              |     "text": "You might want to set a place for your project",
              |     "context": "project.place" },
              |   { "id": "fc92b255367",
              |     "text": "Setting a title helps us give you better suggestions",
              |     "context":"project.title" } ]

            .text Notes:
              ul
                li Context, when present, identifies the element the tip is about to help provide visual assistance to the user. 

        a(name: 'project-suggestions')
        .section Suggestions

          .text Suggestions are proposed items the user can add to the project as new tasks. Suggestions are made based on the project properties and tasks, and are then filtered by participant in case they chose to exclude a particular suggestion (see 
            a(href: '#project-suggestion-exclude') Exclude Suggestion
            |).

          .sub-section GET /project/{projectId}/suggestions

            pre
              | [ { "id": "ce8002f6d",
              |     "title":"Buy party favors",
              |     "sponsored": true },
              |   { "id": "29d400e3a0",
              |     "title": "Pick music",
              |     "sponsored": false } ]

            .text Notes:
              ul
                li "isSponsored" indicates is the suggestion is an advertisement.

        a(name: 'project-suggestions-exclude')
        .section Exclude Suggestion

          .sub-section DELETE /project/{projectId}/suggestion/{suggestionId}

            .text Notes:
              ul
                li Excludes suggestion for current user and project, but may still show for other participants.

      a(name: 'task')
      .part Task

        a(name: 'task-new')
        .section New

          .sub-section PUT /project/{projectId}/task[?position={arrayPosition}]

            pre
              | PUT /project/55cf687663/task HTTP/1.1
              | Host: #{host.authority('api')}
              | 
              | { "title": "Setup tables" }

            .text Response:

            pre
              | HTTP/1.1 201 Created
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | Location: #{host.uri('api')}/task/29d400ffc5
              | 
              | { "status": "ok",
              |   "id": "29d400ffc5" }

            .text Notes:
              ul
                li New task can be added with "title" and "status" keys.
                li Status can be "open", "pending", or "close".
                li New tasks are always added at the bottom, unless otherwise specified.
                li Optional "position" query parameter sets position (returns "position" if successful with response, otherwise assume the position part of the request failed). First position is 0.

        a(name: 'task-new-suggestion')
        .section New from Suggestion

          .sub-section PUT /project/{projectId}/task?suggestion={suggestionId}[&position={arrayPosition}]

            pre
              | PUT /project/55cf687663/task?suggestion=ce8002f6d HTTP/1.1
              | Host: #{host.authority('api')}

            .text Response:
            
            pre
              | HTTP/1.1 201 Created
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | Location: #{host.uri('api')}/task/29d40101b3
              | 
              | { "status": "ok",
              |   "id": "29d40101b3" }

            .text Notes:
              ul
                li New tasks are always added at the bottom, unless otherwise specified.
                li Optional "position" query parameter sets position (returns "position" if successful with response, otherwise assume the position part of the request failed). First position is 0.
                li Cannot include a body when creating from suggestion.

        a(name: 'task-properties')
        .section Properties

          .sub-section GET /task/{taskId}

            pre
              | { "id": "2e4ed30d96",
              |   "created": 1299912723861,
              |   "modified": 1299912723868,
              |   "project": "55cf687663",
              |   "title": "Buy Small Cake",
              |   "status": "open",
              |   "participants": [ "c2727e7b75" ] }

            .text Notes:
              ul
                li Status can be "open", "pending", or "close".
                li "modified" only applies to this information, not to task details (see 
                  a(href: '#details-view') Details View
                  |).

        a(name: 'details-update')
        .section Change Properties

          .sub-section POST /task/{taskId}

            pre
              | POST /task/2e4ed30d96 HTTP/1.1
              | Host: #{host.authority('api')}
              | 
              | { "title": "Buy Big Cake" }

            .text Notes:
              ul
                li Update can include "title", "status", and "participants" (assignments).
                li Participants is an array of participant ids (from the project participants list, see 
                  a(href: '#project-properties') Project Properties
                  |). Use an empty array to remove all task participant assignments. Participants list must include the full list, not just the requested changes.
                li Status can be "open", "pending", or "close".

        a(name: 'task-position')
        .section Set Position

          .sub-section POST /task/{taskId}?position={arrayPosition}

            pre
              | POST /task/2e4ed30d96?position=0 HTTP/1.1
              | Host: #{host.authority('api')}

            .text Notes:
              ul
                li First position is 0.
                li Cannot combine changing task properties and position in one request.

        a(name: 'task-last')
        .section Stamp Last

          .sub-section POST /task/{taskId}/last

            .text Notes:
              ul
                li Should be called when the user is caught up with reviewing all the task details (see 
                  a(href: '#details-view') Details View
                  |).
                li Sets timestamp to now (using the server's clock).

        a(name: 'task-delete')
        .section Delete task

          .sub-section DELETE /task/{taskId}

            .text Notes:
              ul
                li Permanently deletes the task and all its details.

      a(name: 'details')
      .part Task Details

        a(name: 'details-view')
        .section View

          .sub-section GET /task/{taskId}/details[?since={timestamp}]

            pre
              | { "id": "2e4ed30d96",
              |   "project": "55cf687663",
              |   "created": 1299912723861,
              |   "modified": 1299912723869,
              |   "thread": [ { "created": 1299912723879,
              |                 "user": { "id": "fa0bda9b1b",
              |                           "display": "John Doe" },
              |                 "type": "text",
              |                 "content": "Something interesting to say" },
              |               { "created": 1299912723890,
              |                 "user": { "id": "fa0bda9b1b",
              |                           "display": "John Doe" },
              |                 "type": "text",
              |                 "content": "More interesting to say" } ] }

            .text Notes:
              ul
                li Type can only be "text" (for now).
                li Thread comments are sorted old to new.
                li Optional "since" query parameter can be used to retrieve only new thread comments with timestamps greater than the provided value.

        a(name: 'details-add')
        .section Add Thread Comment

          .sub-section POST /task/{taskId}/detail[?last=true]

            pre
              | POST /task/2e4ed30d96/detail HTTP/1.1
              | Host: #{host.authority('api')}
              | 
              | { "type": "text",
              |   "content": "This is very interesting" }

            .text Notes:
              ul
                li New thread comments must include "type" (set to "text") and "content".
                li Thread comments are added at the end.
                li Optional "last" query parameter with value "true" can be used to automatically stamp last (same as calling 
                  a(href: '#task-last') Task Stamp Last
                  |).

      a(name: 'storage')
      .part Client Storage

        .text Client storage is a simple key-value store for client-specific information. The values are specific to the current client and user as determined by the credentials used to authenticate.

        a(name: 'storage-all')
        .section Get All

          .sub-section GET /storage

            pre
              | { "key": "value",
              |   ... }

        a(name: 'storage-key')
        .section Get Key

          .sub-section GET /storage/{key}

            pre
              | { "key": "value" }

        a(name: 'storage-update')
        .section Set Value

          .sub-section POST /storage/{key}

            pre
              | POST /storage/key HTTP/1.1
              | Host: #{host.authority('api')}
              | 
              | { "value":"example_value" }

            .text Notes:
              ul
                li Key is always a string and must be a-z, A-Z, 0-9, and _ only.
                li Value can be any string.
                li If key exists, it will be updated with the new value.

        a(name: 'storage-delete')
        .section Delete Key

          .sub-section DELETE /storage/{key}

      a(name: 'batch')
      .part Batch Requests

        .text Batch requests allow the client to chain together multiple requests to reduce the number of round-trips needed to get a full set of data. Requests can use the responses of other requests made before them to create a customized chain.

        a(name: 'batch-get')
        .section GET Batch

          .sub-section POST /batch

            pre
              | POST /batch HTTP/1.1
              | Host: #{host.authority('api')}
              | 
              | { "get": [ "/profile",
              |            "/storage/activeproject",
              |            "/project/$1.activeproject" ] }

            .text Response:

            pre
              | HTTP/1.1 200 Ok
              | Date: Sun, 06 Feb 2011 20:43:31 GMT
              | 
              | [ { "id": "fa0bda9b1b",
              |     "created": 1299912723861,
              |     "modified": 1299912723861,
              |     "name": "John Doe",
              |     "username": "john.doe",
              |     "emails": [ { "address":"john@example.net",
              |                   "isVerified": true },
              |                 { "address":"doe@example.com",
              |                   "isVerified":false } ],
              |     "facebook": "1234567890",
              |     "twitter": "1234567890",
              |     "yahoo": "ABCDEFGHIJKLMNOPQRSTUVWXYZ" },
              |
              |   { "activeproject": "55cf687663" },
              |
              |   { "id": "55cf687663", 
              |     "created": 1299912723861,
              |     "modified": 1299912723865,
              |     "title": "Anniversary Party",
              |     "place": "Los Gatos, CA",
              |     "date": "2011-04-13",
              |     "time": "18:30:00",
              |     "participants": [ { "id": "fa0bda9b1b",
              |                         "display": "John Doe" },
              |                       { "id": "c2727e7b75",
              |                         "display": "Jane Doe",
              |                         "isPending": true },
              |                       { "id": "pid:4deff4e9eb",
              |                         "display": "steve@example.com",
              |                         "isPid": true,
              |                         "isPending": true },
              |                       { "id": "pid:dh38hd8hs8",
              |                         "display": "Main Street Florist",
              |                         "isPid": true } ] } ]

            .text Notes:
              ul
                li The request is using POST even though it only executes GET because of the inclusion of a request body.
                li "get" is an array of HTTP request paths, executed in order.
                li The result JSON object of each response can be referenced by a follow-up response using $n where n is the request position in the array (0 being the first).

      a(name: 'stream')
      .part Streaming Updates

        .text The update stream provides real-time notifications about changes made to the project or any of its objects by other participants. The stream API uses 
          a(href: 'http://socket.io') Socket.IO
          |  to deliver the updates to the client. In the future we will have other streaming options for non-browser-based clients.

        .text To connect, include the socket.io script:

        pre
          | <script src="#{host.uri('api')}/socket.io/socket.io.js"></script>

        .text and initialize the connection:

        pre
          | var socket = new io.Socket('#{host.authority('api')}', { port: 80, rememberTransport: false });
          | 
          | socket.on('message', function (message) {
          |     if (message.type == 'connect') {
          |         // Authenticate the connection
          |         socket.send({ type: 'initialize',
          |                       id: credentials.id,
          |                       mac: MAC.macMessage(message.session, credentials) });
          |     }
          |     else if (message.type == 'initialize') {
          |         // Check for errors
          |         if (message.error) {
          |         }
          |     }
          |     else {
          |         // Process update
          |     }
          | });
          | 
          | socket.connect();

        .text The connection must be initialized with the "initialize" message request before any subscriptions are made.
          |  To initialize the request, the client must calculate an HMAC over the session identifier using its the OAuth credentials.
          |  The
          a(href: '/test/api') API test utility
          |  includes a small module for MAC authentication which provides the MAC.macMessage() function. Just open the test utility page
          |  source to see how it's done. The credentials object in the example is a simple JSON structure with "id", "key", and "algorithm"
          |  keys which contain the OAuth credentials.

        a(name: 'stream-types')
        .section Update Types

           .text The stream includes the following update types: "connect", "error", "initialize", "subscribe", "unsubscribe", and "update".

          .sub-section connect

            .text Received after a new connection is made, and includes the session identifier. The session identifier is needed to subscribe and unsubscribe to project updates.

            pre
              | { "type": "connect",
              |   "session": "9876543210" }

          .sub-section error

            .text Received when the server cannot understand a message received from the client over the socket.

            pre
              | { "type": "error",
              |   "error": "Unknown message type" }

          .sub-section initialize

            .text Received in response to an initialization request. The "status" key is used to determine if the connection was successfully initialized.

            pre
              | { "type": "initialize",
              |   "status": "ok",
              |   "user": "fa0bda9b1b" }

            .text or for errors:

            pre
              | { "type": "initialize",
              |   "status": "error",
              |   "error": "Invalid token" }

          .sub-section subscribe

            .text Received after a successful subscribe request is received by the API server using a normal HTTP request (see 
              a(href: '#stream-subscribe') Stream Project Subscribe
              |). Includes the subscribed project identifier.

            pre
              | { "type": "subscribe",
              |   "project": "55cf687663" }

          .sub-section unsubscribe

            .text Received after a successful unsubscribe request is received by the API server using a normal HTTP request (see 
              a(href: '#stream-unsubscribe') Stream Project Unsubscribe
              |). Includes the unsubscribed project identifier.

            pre
              | { "type": "unsubscribe",
              |   "project": "55cf687663" }

          .sub-section update

            .text Updates are sent to the client every time the user's profile, contacts, or list of projects changes regardless of any subscription.
              |  Other updates for project, tasks list, task, and details are sent only after subscribing to each particular project for stream updates.
              |  Every update includes the type of object that changed ("profile", "contacts", "projects", "project", "tasks", "task", or "details"), the
              |  identifier needed to refresh that object ("user", "project", or "task"), and the user identifier of the user who made the change.

            pre
              | { "type": "update",
              |   "object": "profile",
              |   "user": "fa0bda9b1b",
              |   "by": "fa0bda9b1b",
              |   "macId": "jPHj7Z49" }

            .text Notes:
              ul
                li The "macId" includes the first few characters of the OAuth token used to make the change being reported. This can be used
                  |  to differentiate between changes made locally on the client and those made by the same user on another client.
                li Update notifications do not include the actual data changed, only the identifier of what was changed.

        a(name: 'stream-subscribe')
        .section Project Subscribe

          .sub-section POST /stream/{sessionId}/project/{projectId}

            .text Notes:
              ul
                li Socket must be connected and initialized before subscriptions are made.
                li Success response will be received both directly in the HTTP response and via the socket connection.
                li Subscriptions are automatically terminated on socket disconnect.

        a(name: 'stream-unsubscribe')
        .section Project Unsubscribe

          .sub-section DELETE /stream/{sessionId}/project/{projectId}

            .text Notes:
              ul
                li Success response will be received both directly in the HTTP response and via the socket connection.
