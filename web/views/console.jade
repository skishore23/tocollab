script(src: '/scripts/mac.js')
script(src: host.uri('api') + '/socket.io/socket.io.js')
script
    var credentials;

    function htmlEscape(string) {
    
        return string.replace(/&/g,'&amp;').replace(/>/g,'&gt;').replace(/</g,'&lt;').replace(/"/g,'&quot;');
    }

    function fetchToken() {

        var request = new XMLHttpRequest();
        request.onreadystatechange = function () {

            if (request.readyState === 4) {

                if (request.status === 200) {

                    try {

                        credentials = JSON.parse(request.responseText);
                    }
                    catch (e) { }
                }

                if (credentials) {

                    // Socket.io

                    var socket = io.connect('#{host.uri("api")}');

                    socket.on('connect', function () {

                        document.getElementById('session').innerHTML = 'authenticating...';
                    });

                    socket.on('message', function (message) {

                        if (message.type == 'connect') {

                            document.getElementById('session').innerHTML = htmlEscape(message.session);
                            socket.json.send({ type: 'initialize', id: credentials.id, mac: MAC.macMessage(message.session, credentials) });
                        }
                        else if (message.type == 'initialize') {

                            document.getElementById('session').style.color = (message.status == 'ok' ? 'green' : 'red');

                            if (message.error) {

                                document.getElementById('stream').innerHTML += htmlEscape(JSON.stringify(message.error, null, 4)) + '<br />';
                                resizeListBox();
                            }
                        }
                        else {

                            document.getElementById('stream').innerHTML += htmlEscape(JSON.stringify(message, null, 4)) + '<br />';
                            resizeListBox();
                        }
                    });

                    document.getElementById('session').innerHTML = 'connecting...';
                }
                else {

                    window.location = '/login?next=%2Ftest%2Fapi';
                    return;
                }
            }
        };

        request.open('GET', '#{host.uri('web')}/oauth/issue');
        request.send();
    }

    function sendRequest() {

        var request = new XMLHttpRequest();

        request.onreadystatechange = function() {

            if (request.readyState == 4) {

                document.getElementById('response').innerHTML = htmlEscape(JSON.stringify(JSON.parse(request.responseText), null, 4));
                resizeListBox();
            }
        };

        // Prepare authorization attributes

        var uri = document.getElementById('uri').value;
        var method = document.getElementById('httpMethod').value;
        var content = document.getElementById('content').value;

        // Calculate Signature

        var authorization = MAC.getAuthorizationHeader(method, uri, credentials, (content || method == 'POST' || method == 'PUT' ? content : null), null);

        // Send request

        request.open(method, uri);
        request.setRequestHeader('Authorization', authorization);

        if (content) {

            request.setRequestHeader('Content-Type', 'application/json');
        }

        request.send(content);
        document.getElementById('body').innerHTML = 'Waiting...';
    }

#test-form
  label URI: 
    input#uri(size: '90', type: 'text', value: host.uri('api') + '/projects')
  select#httpMethod
    option(selected: 'selected') GET
    option POST
    option PUT
    option DELETE
    option HEAD
  button.blue-button.right(onclick: 'sendRequest();') Execute
  br
  label Payload: 
    input#content(size: '100', type: 'text')
  .clearfix

#text-box

  p
  | Result:
  p
    pre
      #response
  p
  | Stream:
  span#session
  pre
    #stream

.clearfix

script
  fetchToken();
